#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################
REST=/data/joy/BBL/studies/pnc/processedData/restbold/restbold_201607151621/
QOUT=/data/joy/BBL/projects/pncReproc2015/restbold/quality
DATAREL=/data/joy/BBL/studies/pnc/n1601_dataFreeze/neuroimaging/rest/
DATARELL=/data/joy/BBL/studies/pnc/n2416_dataFreeze/neuroimaging/rest/
SAMPLE=2416

###################################################################
# 1. Assemble QA outputs from the XCP Engine.
###################################################################
rm -f ${QOUT}/REST_XCP.csv
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*quality.csv" \
   -o XCP_QAVARS.csv
mv -f ${REST}/XCP_QAVARS.csv ${QOUT}/XCP_QAVARS.csv
xcpVars=$(cat ${QOUT}/XCP_QAVARS.csv|sed s@'subject\[0\]'@'bblid'@g|sed s@'subject\[1\]'@'datexscanid'@g)
for s in $xcpVars
   do
   s=$(echo $s|cut -d',' -f1),$(echo $s|cut -d'x' -f2-)
   echo $s >> ${QOUT}/REST_XCP.csv
done

###################################################################
# 2. R script assimilates the above with variables from previous
#    QA efforts.
#    First, preprocess the coverage data by stripping out the date.
###################################################################
[[ ${SAMPLE} == 2416 ]] && SUBJID=$(tail -n+2 n2416_IDs.csv)
[[ ${SAMPLE} != 2416 ]] && SUBJID=$(tail -n+2 n1601_IDs.csv)
rm -f ${QOUT}/REST_COVERAGE_PROCESSED${SAMPLE}.csv
${XCPEDIR}/utils/coverMask.R \
   -i ${QOUT}/REST_STD_MASKS${SAMPLE}.csv \
   -m coveragePoints.nii.gz \
   -o maskRestVoxelwiseCoverage${SAMPLE}.nii.gz \
   >> ${QOUT}/REST_COVERAGE${SAMPLE}.csv
echo "bblid,scanid,restVoxelwiseCoverageInclude" \
   >> ${QOUT}/REST_COVERAGE_PROCESSED${SAMPLE}.csv
cat ${QOUT}/REST_COVERAGE${SAMPLE}.csv\
   |cut -d',' -f1,2,5 \
   >> ${QOUT}/REST_COVERAGE_PROCESSED${SAMPLE}.csv
###################################################################
#    Then, merge them all.
###################################################################
./restQA${SAMPLE}_assembleVars.R

###################################################################
# 3. Assemble ROIwise outputs from the XCP Engine.
#    Each block below performs the assembly for one contrast for
#    one parcellation.
#
#    First, ReHo outputs for JLF.
###################################################################
mkdir -p ${QOUT}/2416
rm -f ${QOUT}/measures.csv
echo "reho" >> ${QOUT}/measures.csv
rm -f ${QOUT}/REST_ROI_JLF*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*JLFintersect_val_reho.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_JLF1.txt
./mergeROIvals${SAMPLE}.R \
   -r JLF \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}jlfRestReHo.csv
###################################################################
#    ReHo outputs for Glasser.
###################################################################
rm -f ${QOUT}/REST_ROI_GlasserPNC*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*GlasserPNC_val_reho.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_GlasserPNC1.txt
./mergeROIvals${SAMPLE}.R \
   -r GlasserPNC \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}glasserRestReHo.csv
###################################################################
#    ReHo outputs for GraSP.
###################################################################
rm -f ${QOUT}/REST_ROI_GraSP*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*GraSP227_val_reho.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_GraSP2271.txt
./mergeROIvals${SAMPLE}.R \
   -r GraSP227 \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}graspRestReHo.csv
###################################################################
#    ReHo outputs for Lausanne.
###################################################################
scales="33 60 125 250"
for sc in $scales
   do
   rm -f ${QOUT}/REST_ROI_GraSP*
   /data/joy/BBL/applications/xcpEngine/utils/combineOutput \
      -p ${REST} \
      -f "*Lausanne${sc}_val_reho.1D" \
      -o REST_ROI1.txt
   mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_Lausanne${sc}1.txt
   ./mergeROIvals${SAMPLE}.R \
      -r Lausanne${sc} \
      -o ${QOUT}/${SAMPLE}/${SAMPLE}lausanne${sc}RestReHo.csv
done
###################################################################
#   ALFF outputs for JLF.
###################################################################
rm -f ${QOUT}/measures.csv
echo "alff" >> ${QOUT}/measures.csv
rm -f ${QOUT}/REST_ROI_JLF*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*JLFintersect_val_alff.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_JLF1.txt
./mergeROIvals${SAMPLE}.R \
   -r JLF \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}jlfRestALFF.csv
###################################################################
#   ALFF outputs for Glasser.
###################################################################
rm -f REST_ROI_GlasserPNC*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*GlasserPNC_val_alff.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_GlasserPNC1.txt
./mergeROIvals${SAMPLE}.R \
   -r GlasserPNC \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}glasserRestALFF.csv
###################################################################
#    ALFF outputs for GraSP.
###################################################################
rm -f ${QOUT}/REST_ROI_GraSP*
/data/joy/BBL/applications/xcpEngine/utils/combineOutput \
   -p ${REST} \
   -f "*GraSP227_val_alff.1D" \
   -o REST_ROI1.txt
mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_GraSP2271.txt
./mergeROIvals${SAMPLE}.R \
   -r GraSP227 \
   -o ${QOUT}/${SAMPLE}/${SAMPLE}graspRestALFF.csv
###################################################################
#    ALFF outputs for Lausanne.
###################################################################
scales="33 60 125 250"
for sc in $scales
   do
   rm -f ${QOUT}/REST_ROI_GraSP*
   /data/joy/BBL/applications/xcpEngine/utils/combineOutput \
      -p ${REST} \
      -f "*Lausanne${sc}_val_alff.1D" \
      -o REST_ROI1.txt
   mv -f ${REST}/REST_ROI1.txt ${QOUT}/REST_ROI_Lausanne${sc}1.txt
   ./mergeROIvals${SAMPLE}.R \
      -r Lausanne${sc} \
      -o ${QOUT}/${SAMPLE}/${SAMPLE}lausanne${sc}RestALFF.csv
done

###################################################################
# ...and move the data to the data release.
###################################################################
tables=$(ls -d1 ${QOUT}/2416/*)
for t in $tables
   do
   parcM=$(echo ${t}\
      |rev\
      |cut -d'/' -f1\
      |rev\
      |sed s@$SAMPLE@@g\
      |sed s@'.csv'@@g\
      |sed s@'Rest'@'#'@g)
   parc=$(echo $parcM|cut -d'#' -f1)
   M=$(echo $parcM|cut -d'#' -f2)
   SUBJID=$(tail -n+2 n1601_IDs.csv)
   target=${DATAREL}/n1601_${parc}${M}Values.csv
   rm -f $target
   head -n1 ${t}|sed s@'"'@@g >> ${target}
   for s in $SUBJID
      do
      grep ^$s ${t}|sed s@'"'@@g >> ${target}
   done
   SUBJID=$(tail -n+2 n2416_IDs.csv)
   target=${DATARELL}/n2416_${parc}${M}Values.csv
   rm -f $target
   head -n1 ${t}|sed s@'"'@@g >> ${target}
   for s in $SUBJID
      do
      grep ^$s ${t}|sed s@'"'@@g >> ${target}
   done
done

